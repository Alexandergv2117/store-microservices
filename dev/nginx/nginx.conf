user  nginx;
worker_processes  1;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
  worker_connections  1024;
}

http {
  map $http_apikey $api_client_name {
    default "";

    "cgRsROk8khb0f+LL8N1J1MZc" "client_one";
  }

  # Auth service
  upstream auth {
    least_conn;
    server auth:5000;
  }

  # Product service
  upstream product {
    least_conn;
    server products:5300;
  }

  # User service
  upstream users {
    least_conn;
    server users:5200;
  }

  # RATE LIMITING
  limit_req_zone
    $binary_remote_addr
    zone=mylimit:10m
    rate=10r/s;

  server {
    listen 80;
    server_name localhost;

    location / {
      root /usr/share/nginx/html;
      index index.html index.htm;
    }

    # Authentication by nginx

    location = /protected {
      internal;
      if ($request_method = OPTIONS) {
        add_header 'Access-Control-Allow-Origin' $http_origin;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
        add_header 'Access-Control-Allow-Headers' 'Origin, X-Requested-With, Content-Type, Accept, Authorization';
        add_header 'Access-Control-Max-Age' 1728000;
        add_header 'Content-Type' 'text/plain charset=UTF-8';
        add_header 'Content-Length' 0;
        return 204;
      }

      rewrite ^ /auth/validate break;
      proxy_set_header X-Original-URI $request_uri;
      proxy_pass http://auth;
    }

    location = /_validate_apikey {
      internal;

      if ($http_apikey = "") {
        return 401; # Unauthorized
      }
      if ($api_client_name = "") {
        return 403; # Forbidden
      }

      return 204; # OK (no content)
    }

    # SERVICE ROUTING

    # Auth service
    location /auth {
      auth_request /_validate_apikey;
      proxy_set_header Origin $http_origin;

      location /auth/login {
        limit_req zone=mylimit;
        rewrite ^ /auth/login break;
        proxy_pass http://auth;
      }

      location /auth/generate {
        # limit_req zone=mylimit;
        rewrite ^ /auth/generate break;
        proxy_pass http://auth;
      }

      location /auth/refresh* {
        limit_req zone=mylimit;
        rewrite ^ /auth/refresh break;
        proxy_pass http://auth;
      }

      location /auth/validate {
        rewrite ^ /auth/validate break;
        proxy_pass http://auth;
      }

      return 404;
    }

    # Product service

    location /product {
      auth_request /protected;
      proxy_pass http://product;
    }

    # User service

    location /user {
      auth_request /protected;
      proxy_pass http://users;
    }
  }
}